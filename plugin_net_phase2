#!/bin/sh

#########################################################################
#
#    * DO NOT REMOVE *
#-----------------------------------------------------
# PLUGIN_AUTHOR=0x25 <0x25.contact@gmail.com>
# PLUGIN_CATEGORY=networking
# PLUGIN_DATE=2015-12-11
# PLUGIN_DESC=Extend network infomartions and counters
# PLUGIN_NAME=net
# PLUGIN_PACKAGE=all
# PLUGIN_REQUIRED_TESTS=
# PLUGIN_VERSION=1.0.0
#-----------------------------------------------------
#########################################################################
#
# Test        : CUST-0011
# Description : Show network insformations and counters
# plugin phase1 (run at start, no output ! collect data)
# plugin phase2 (run att the end, show result)

Register --test-no CUST-0011 --preqs-met YES --weight L --network YES --description "Extend network insformations and counters"

# ------------------------------
# Plugin configuration variables

# Unnecessary services (ports)
unnecessary="7 9 11 13 15 17 19 37 79"

# Insecure/plaintext protocols (ports)
insecure="21 23 25 110 512 513 514 6000 6001"

# max ARP entry
maxArpEntry=200

# max route entry
maxRouteEntry=200

# ---------------------------------

if [ ${SKIPTEST} -eq 0 ]; then
	FOUNDPROBLEM=0
	logtext "NET PLG : Start plugin net"

	containsElement () {
	  # exemple containsElement "var" "$array"
	  local e
	  for e in $2; do 
		if [ "$e" -eq "$1" ]; then
			return 1; 
	  	fi
	  done
	  return 0
	}

	# Interfaces informations
	logtext "NET PLG : interfaces informations"
	tabInf=""
	for i in $(ip -o link show | awk -F " |:" '{print $3}'); do
		tabInf=$(echo "${tabInf} ${i}")
	done

	NB_INF=$(echo ${tabInf} | wc -w)
	INF_NAME=${tabInf}

	# ARP Ipv4 information
	logtext "NET PLG : ARP ipv4 information"
	tabArp4=""
	for i in $(ip -4 neigh | awk -F " " '{print $1}'); do
		tabArp4="${tabArp4} ${i}"
	done

	NB_ARP4=$(echo ${tabArp4} | wc -w)

	# Arp Ipv6 information
	logtext "NET PLG : ARP ipv6 information"
	tabArp6=""
	for i in $(ip -6 neigh | awk -F " " '{print $1}'); do
		tabArp6="${tabArp6} ${i}"
	done

	NB_ARP6=$(echo ${tabArp6} | wc -w)

	# Ipv4 Route information
	logtext "NET PLG : ipv4 route information"
	NB_ROUTE4=$(ip -4 route show | wc -l)

	# Ipv6 Route information
	logtext "NET PLG : ipv6 route infomration"
	NB_ROUTE6=$(ip -6 route show | wc -l)

	# Ipv4 open port listen (not localhost) 
	logtext "NET PLG : ipv4 listen port"
	tabPort4=""
	for i in $(ss -ltn4 | sed -e "1d" | awk -F " " '{print $4}' | grep -v "127.0.0.1"); do
			#ip=$(echo $i | awk -F ":" '{print $1}')
			port=$(echo $i | awk -F ":" '{print $2}')
			tabPort4="$tabPort4 $port"
	done

	# check unnecessary IPv4 port
	unnecessaryPort4=""
	for u in $tabPort4; do
		containsElement "$u" "$unnecessary"
		res=$?
		if [ "$res" -eq "1" ]; then
			unnecessaryPort4="$unnecessaryPort4 $u"
		fi
	done

	# check unsecure IPv4 port
        insecurePort4=""
        for f in $tabPort4; do
                containsElement "$f" "$insecure"
                res=$?
                if [ "$res" -eq "1" ]; then
                        insecurePort4="$insecurePort4 $f"
                fi
        done

	IPV4_PORT=$(echo ${tabPort4})
	NB_IPV4_PORT=$(echo ${tabPort4} | wc -w)

	# Ipv6 open port listen (not localhost)
	logtext "NET PLG : ipv6 listen port"
	tabPort6=""
	for i in $(ss -ltn6 | sed -e "1d" | awk -F " " '{print $4}'| grep -v "::1"); do
			port=$(echo $i | awk -F ":" '{print $4}')
			#ip=${i:0:$((${#i}-${#port}-1))}
			tabPort6="${tabPort6} ${port}"
	done

        # check unnecessary IPv6 port
        unnecessaryPort6=""
        for u in $tabPort6; do
                containsElement "$u" "$unnecessary"
                res=$?
                if [ "$res" -eq "1" ]; then
                        unnecessaryPort6="$unnecessaryPort6 $u"
                fi
        done

        # check unsecure IPv6 port
        insecurePort6=""
        for f in $tabPort6; do
                containsElement "$f" "$insecure"
                res=$?
                if [ "$res" -eq "1" ]; then
                        insecurePort6="$insecurePort6 $f"
                fi
        done

	IPV6_PORT=$(echo ${tabPort6})
	NB_IPV6_PORT=$(echo ${tabPort6} | wc -w)

	arpColor4="GREEN"
	if [ "$NB_ARP4" -gt "$maxArpEntry" ]; then 
		arpColor4="RED"
	fi

	arpColor6="GREEN"
	if [ "$NB_ARP6" -gt "$maxArpEntry" ]; then
		arpColor6="RED"
	fi

	routeColor4="GREEN"
	if [ "$NB_ROUTE4" -gt "$maxRouteEntry" ]; then
		routeColor4="RED"
	fi

        routeColor6="GREEN"
        if [ "$NB_ROUTE6" -gt "$maxRouteEntry" ]; then
                routeColor6="RED"
        fi

	portColor4="GREEN"
	if [ -z insecurePort4 ]; then
		portColor4="RED"
	fi

	Display --indent 2 --text "- Interface number" --result $NB_INF
	Display --indent 8 --text "- Name : ${INF_NAME}" --color GREEN
	Display --indent 2 --text "- Ipv4 Arp entry" --result $NB_ARP4 --color $arpColor4
	Display --indent 2 --text "- Ipv6 Arp entry" --result $NB_ARP6 --color $arpColor6
	Display --indent 2 --text "- Ipv4 route entry" --result $NB_ROUTE4 --color $routeColor4
	Display --indent 2 --text "- Ipv6 route entry" --result $NB_ROUTE6 --color $routeColor6
	Display --indent 2 --text "- Ipv4 listen port" --result $NB_IPV4_PORT --color $portColor4
	Display --indent 8 --text "All IPv4 listen ports : ${IPV4_PORT}"
	if [ ${#insecurePort4} -gt "1" ]; then
		Display --indent 8 --text "unsecure IPv4 listen ports : ${insecurePort4}" --result "WARNING" --color RED
	fi
	if [ ${#unnecessaryPort4} -gt "1" ]; then
		Display --indent 8 --text "unnecessary IPv4 listen ports : ${unnecessaryPort4}" --result "WARNING" --color YELLOW
	fi
	Display --indent 2 --text "- Ipv6 listen port" --result $NB_IPV6_PORT --color YELLOW
	Display --indent 8 --text "All IPv6 listen ports : ${IPV6_PORT}" 
        if [ ${#insecurePort6} -gt "1" ]; then
                Display --indent 8 --text "unsecure IPv6 listen ports : ${insecurePort6}" --result "WARNING" --color RED
        fi
        if [ ${#unnecessaryPort6} -gt "1" ]; then
                Display --indent 8 --text "unnecessary IPv6 listen ports : ${unnecessaryPort6}" --result "WARNING" --color YELLOW
        fi
fi
